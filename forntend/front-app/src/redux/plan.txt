
アプリ名は報告スパルタン！！！


【ユーザーの導線】
1 まずアプリに入るとログイン状態かサーバーに問い合わせる。
    1.5　サーバーから未ログインと応答が来ればログイン画面に遷移しログインしてもらう。
2 ログインが認可されると、次の画面遷移で現時刻前に済んだ管制実績は取得しないか確認する。
    2.5　取得しない場合は、下番時刻が現在時刻以後の管制実績(AttendanceRecords)をフェッチ
    2.5　取得する場合は、日時を指定してもらう。
3　ダッシュボードに遷移しメイン機能の領域で操作を実施してもらう。



【ユースケース打刻＆お知らせ】
1　自宅出発、現場到着、上番、下番報告を受けたらそれを打刻
2　もし各種報告の期限時間10分前に報告がない場合はアラートで知らせる。（例外として下番報告は30分を過ぎたら本人に確認を取る。）


グローバル状態管理と非同期通信の概要

objects as entity
・AttendanceRcords  は　管制実績の写像で管理対象のデータ。これを管制業務従事者全員がリアルタイムで共有し編集する。
・Reprot　はAttendanceRecord（軸となる管理データ）編集するためのobject reduxでいうACTION
・ReportTypeRecordはAttendanceRcords を報告タイプで分けた単位でユーザーへの表示・操作はこのobjectを通して行う。

基本的なサイクルはAttendanceRecord ->  ReportTypeRecord に分割　　ReportTypeRecordに内包されたReportActionをdispatchしてAttendanceRecordを更新・削除する。


【データ管理の基本　打刻操作（フロントエンド）】



1　fetchしたAttendanceRecordsをreduxで管理する。
2　コンポーネント側で取得したAttendanceRcordsをReportTypeRecordに分割し
2.5 　ReportTypeRecordを時間順でソートし表示する。
3　ReportTypeRecordの内容を変更するにはReportActionをAttendanceRcordsに向けてディスパッチする。
3.5　ReportActionを非同期ミドルウェアで確認し、websocketでサーバーに送信
3.5　他のユーザーは受信したwebsocketからのReportActionをReducerにDispachする（サーバーには送らない）。



【データ管理の基本　打刻操作（サーバーサイド）】
1　websocketで受信したreportActionに基づいてDBを更新する。
2　更新が完了したらreportActionをwebsocketでサブスクライバーのクライアントにブロードキャストする。


【データ管理の基本　時間管理（サーバーサイド）】
1　inmemory or redis　上に　現在時刻でまとめられたAttendanceRecordのデータを1分おきに舐めまわし、現在時刻との差分を確認
2　判定時刻を過ぎた対象エンティティをクライアントにwebsocketのブロードキャストで送信
3　redux middlewire内のwebsocket clientでキャッチしReportActionとしてDispachする。


※　サーバーサイドのブロードキャストのゴルーチンは単一で行って、二つのブロードキャスト用送信チャンネルを受信する。
一つはクライアントからの打刻情報を配信
もう一つはサーバー側で管理している時間の管理によるアラートを配信。






【サブ機能　管制実績ＣＳＶのインポート】
クライアント：1 ファイルリーダーで指定されたＣＳＶを読み込む
クライアント：2　ヘッダー行をまず取得し、必要な項目がそろっているかのチェックを行う。 
    クライアント：2.5　もし問題なければ次の重複確認画面に進む　
    クライアント：2.5　必要項目がそろっていなければ、どの項目が足りないか表示し、ファイルリーダーのファイル選択を促す。
    クライアント：3　サーバーにその内容を送信する。
サーバー：4　過去に打刻があった実績データと重複した場合、（管制実績IDに基づいて）勤務箇所と勤務ポストとの内容に齟齬がないか調べる。
サーバー：4　同一日でかつ同一社員が重複して配置されてないか確認処理を行い。
    サーバー：4.5　重複があれば重複の対象データをサーバーに投げてより詳細な重複確認を行う。詳細な重複確認とは、開始時刻から終了時刻までの期間の重複がないか判定
クライアント：4　重複対象者の重複ポスト0を表示し、ユーザーに捨てる方を選んでもらう。捨てない選択もあり（勤務ポストの都合上どうしても多少重複してしまう現状がある）。
