

services:
  db-2:
    build:
      context: ./backend/store
      dockerfile: DockerFile
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    environment:
      POSTGRES_USER: MY_USER
      POSTGRES_PASSWORD: SAKUSAKU
      POSTGRES_DB: ORIGINAL_PROJECTS
    volumes:
      # - original-project_db-data:/var/lib/postgresql/data
      - ./backend/store/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./backend/store/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./backend/store/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend-network
  
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
      # args:
      #   JWT_SECRET_KEY: "SAKUSAKU"
      #   DB_HOST: "db-2"
      #   DB_PORT: "5432"
      #   DB_USER: "MY_USER"
      #   DB_PASSWORD: "SAKUSAKU"
      #   DB_NAME: "ORIGINAL_PROJECTS"
      #   DB_SSL: "disable"
      #   DB_TIMEZONE: "Asia/Tokyo"
      #   GOPATH: "/go"
      #   GOLANG_VERSION: "1.23.0"
      #   AllowOrigin: "nginx"
      
    environment:
      
      - JWT_SECRET_KEY=SAKUSAKU
      - DB_HOST=db-2
      - DB_PORT=5432
      - DB_USER=MY_USER
      - DB_PASSWORD=SAKUSAKU
      - DB_NAME=ORIGINAL_PROJECTS
      - DB_SSL=disable
      - DB_TIMEZONE=Asia/Tokyo
      - AllowOrigin=192.168.0.25
    # entrypoint:
    #   - ["/bin/bash", "-c", "entrypoint.sh"]
    depends_on:
      - db-2
      
    networks:
      - backend-network

  nginx:
    image: nginx:latest
    ports:
      # - "127.0.0.1:443:443"
      - "443:443"

      # - "127.0.0.1:80:80"
    volumes:
      - ./proxyServer/nginx.conf:/etc/nginx/nginx.conf  
      - ./proxyServer/private.key:/etc/nginx/private.key
      - ./proxyServer/certificate.crt:/etc/nginx/certificate.crt
      - ./forntend/front-app/dist:/usr/share/nginx/html
    depends_on:
      - api
    networks:
      - backend-network

# volumes:
#   original-project_db-data:
networks:
  backend-network:
    driver: bridge